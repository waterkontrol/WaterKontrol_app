Tengo el siguiente proyecto



¬°Absolutamente! Aqu√≠ tienes la gu√≠a definitiva y completa, paso a paso, desde un sistema completamente limpio hasta tener tu aplicaci√≥n funcionando con la nueva base de datos relacional. No se omite ni un solo comando o l√≠nea de c√≥digo.

Paso 1: Preparaci√≥n del Entorno (Desde Cero) üñ•Ô∏è

Si ya tienes alguno de estos programas, puedes saltar esa parte.

Instalar Node.js:

Ve a la p√°gina oficial de Node.js.

Descarga la versi√≥n LTS (Recomendada para la mayor√≠a de los usuarios) y sigue los pasos del instalador.

Para verificar que se instal√≥ correctamente, abre el S√≠mbolo del sistema (CMD) o PowerShell y ejecuta:

Bash



node -v

npm -v

Deber√≠as ver los n√∫meros de las versiones.

Instalar Visual Studio Code (VS Code):

Ve al sitio web oficial de VS Code.

Descarga el instalador y ejec√∫talo.

Instalar PostgreSQL:

Ve a la p√°gina de descargas de PostgreSQL.

Descarga el instalador para Windows y ejec√∫talo.

¬°MUY IMPORTANTE! Durante la instalaci√≥n, te pedir√° que crees una contrase√±a para el superusuario postgres. An√≥tala y no la olvides, la necesitar√°s en cada paso. El resto de las opciones d√©jalas por defecto.

Paso 2: Creaci√≥n y Configuraci√≥n de la Base de Datos üêò

Ahora vamos a crear la estructura de tablas que te enviaron, pero traducida a PostgreSQL.

Abrir la Consola de PostgreSQL (psql):

Busca en el men√∫ de inicio de Windows "SQL Shell (psql)" y √°brelo.

Te pedir√° varios datos. Simplemente presiona Enter para aceptar los valores por defecto (Server [localhost], Database [postgres], Port [5432], Username [postgres]).

Cuando te pida la contrase√±a (Password for user postgres:), escribe la que creaste durante la instalaci√≥n.

Crear la Base de Datos:

Dentro de la consola de psql, que ahora te muestra un prompt como postgres=#, ejecuta el siguiente comando para crear tu base de datos:

SQL



CREATE DATABASE dispositivos_db;

Conectarse a la Nueva Base de Datos:

Ahora, con√©ctate a la base de datos que acabas de crear con el comando:

SQL



\c dispositivos_db

El prompt cambiar√° a dispositivos_db=#.

Crear todas las Tablas:

Copia el bloque de c√≥digo SQL completo que aparece a continuaci√≥n, p√©galo directamente en la consola de psql y presiona Enter. Esto ejecutar√° todos los comandos de una vez y crear√° toda la estructura.

SQL



-- TABLA DE USUARIOSCREATE TABLE usuario (

usr_id SERIAL PRIMARY KEY,

nombre VARCHAR(50),

correo VARCHAR(50) NOT NULL UNIQUE,

clave VARCHAR(255) NOT NULL

);-- TABLA DE DISPOSITIVOSCREATE TABLE dispositivo (

dsp_id SERIAL PRIMARY KEY,

modelo VARCHAR(50) NOT NULL,

tipo VARCHAR(20) NOT NULL,

serie VARCHAR(50) NOT NULL,

marca VARCHAR(50),

estatus CHAR(1) NOT NULL, -- 'A' para Activo, 'I' para Inactivo

fecha_creacion TIMESTAMPTZ DEFAULT NOW()

);-- TABLA DE PAR√ÅMETROS (Ej: Temperatura, Humedad, etc.)CREATE TABLE parametros (

prt_id SERIAL PRIMARY KEY,

nombre VARCHAR(20) NOT NULL,

tipo VARCHAR(20) NOT NULL,

unidad VARCHAR(10),

valormin NUMERIC(10, 2),

valormax NUMERIC(10, 2),

valorini NUMERIC(10, 2)

);-- TABLA INTERMEDIA: QU√â PAR√ÅMETROS MIDE CADA DISPOSITIVOCREATE TABLE dispositivo_parametro (

dsp_id INT NOT NULL,

prt_id INT NOT NULL,

PRIMARY KEY (dsp_id, prt_id),

FOREIGN KEY (dsp_id) REFERENCES dispositivo (dsp_id) ON DELETE CASCADE,

FOREIGN KEY (prt_id) REFERENCES parametros (prt_id) ON DELETE CASCADE

);-- TABLA DE REGISTRO: VINCULA USUARIO, DISPOSITIVO Y TOPIC MQTTCREATE TABLE registro (

rgt_id SERIAL PRIMARY KEY,

usr_id INT NOT NULL,

dsp_id INT NOT NULL,

app_id INT, -- A√∫n no se usa, pero lo dejamos

topic VARCHAR(100) NOT NULL UNIQUE,

FOREIGN KEY (usr_id) REFERENCES usuario (usr_id),

FOREIGN KEY (dsp_id) REFERENCES dispositivo (dsp_id) ON DELETE CASCADE

);-- TABLA DE CABECERA DE MENSAJESCREATE TABLE mensajes (

msg_id SERIAL PRIMARY KEY,

rgt_id INT NOT NULL,

fecha TIMESTAMPTZ NOT NULL DEFAULT NOW(),

status INT NOT NULL, -- 1 para recibido, 0 para error

FOREIGN KEY (rgt_id) REFERENCES registro (rgt_id) ON DELETE CASCADE

);-- TABLA DE DETALLE DE MENSAJES (VALORES DE LOS PAR√ÅMETROS)CREATE TABLE parametros_mensajes (

msg_id INT NOT NULL,

prt_id INT NOT NULL,

valor NUMERIC(10, 2) NOT NULL,

PRIMARY KEY (msg_id, prt_id),

FOREIGN KEY (msg_id) REFERENCES mensajes (msg_id) ON DELETE CASCADE,

FOREIGN KEY (prt_id) REFERENCES parametros (prt_id) ON DELETE CASCADE

);-- COMENTARIOS

COMMENT ON COLUMN dispositivo.estatus IS 'Estatus del dispositivo: A (Activo), I (Inactivo)';

COMMENT ON COLUMN mensajes.status IS 'Estatus del mensaje: 1 (Procesado), 0 (Error)';

¬°Listo! Tu base de datos est√° creada y estructurada correctamente. Puedes cerrar la ventana de psql.

Paso 3: Creaci√≥n del Proyecto Node.js ‚öôÔ∏è

Crear la Carpeta del Proyecto:

Crea una carpeta en un lugar f√°cil de encontrar (ej: en tu Escritorio) y ll√°mala api_dispositivos.

Abrir el Proyecto en VS Code:

Abre VS Code, ve a Archivo -> Abrir carpeta... y selecciona la carpeta api_dispositivos.

Abrir la Terminal en VS Code:

Dentro de VS Code, ve a Terminal -> Nueva terminal. Una consola se abrir√° en la parte inferior.

Inicializar el Proyecto:

En la terminal de VS Code, ejecuta el siguiente comando para crear el archivo package.json:

Bash



npm init -y

Instalar Dependencias:

Ahora, instala todos los paquetes de Node.js que necesitamos con este comando:

Bash



npm install express pg dotenv mqtt

Paso 4: Escribir el C√≥digo de la Aplicaci√≥n üìù

Ahora crearemos los archivos de nuestro proyecto uno por uno.

Crear el archivo .gitignore:

Este archivo le dice a Git qu√© carpetas ignorar (¬°muy importante!).

Haz clic derecho en el explorador de archivos de VS Code y selecciona Nuevo archivo. N√≥mbralo .gitignore.

Pega el siguiente contenido dentro:

Fragmento de c√≥digo



# Dependencias

/node_modules



# Variables de entorno

.env

Crear el archivo .env:

Crea otro archivo llamado .env para guardar tus credenciales.

Pega el siguiente contenido y reemplaza los valores con los tuyos (especialmente tu contrase√±a).

Fragmento de c√≥digo



# Configuraci√≥n de la Base de Datos PostgreSQL

DB_USER=postgres

DB_HOST=localhost

DB_DATABASE=dispositivos_db

DB_PASSWORD=AQUI_VA_TU_CONTRASE√ëA_DE_POSTGRES

DB_PORT=5432



# Configuraci√≥n del Broker MQTT (usamos uno p√∫blico para pruebas)

MQTT_BROKER_URL=mqtt://broker.hivemq.com

Crear el archivo principal index.js:

Finalmente, crea el archivo index.js.

Copia y pega todo el siguiente c√≥digo dentro de este archivo. Este es el cerebro de tu aplicaci√≥n.

JavaScript



// Cargar las variables de entorno desde el archivo .envrequire('dotenv').config();// Importar las librer√≠as necesariasconst express = require('express');const { Pool } = require('pg');const mqtt = require('mqtt');// --- CONFIGURACI√ìN ---const app = express();

app.use(express.json()); // Middleware para que Express entienda peticiones JSON// Configurar la conexi√≥n a la base de datos usando las variables del .envconst pool = new Pool({

user: process.env.DB_USER,

host: process.env.DB_HOST,

database: process.env.DB_DATABASE,

password: process.env.DB_PASSWORD,

port: process.env.DB_PORT,

});// ===================================================================================// ENDPOINT DE API: REGISTRO DE UN NUEVO DISPOSITIVO// Este endpoint solo crea la entidad del dispositivo.// ===================================================================================

app.post('/dispositivo', async (req, res) => {

const { modelo, tipo, serie, marca, estatus } = req.body;



// Validaci√≥n de datos de entrada

if (!modelo || !tipo || !serie || !estatus) {

return res.status(400).json({ error: 'Los campos modelo, tipo, serie y estatus son obligatorios.' });

}



const query = `

INSERT INTO dispositivo (modelo, tipo, serie, marca, estatus)

VALUES ($1, $2, $3, $4, $5)

RETURNING dsp_id;

`;



try {

const result = await pool.query(query, [modelo, tipo, serie, marca, estatus]);

res.status(201).json({

message: 'Dispositivo creado con √©xito.',

dsp_id: result.rows[0].dsp_id

});

} catch (error) {

console.error('Error al crear el dispositivo:', error);

res.status(500).json({ error: 'Error interno del servidor.' });

}

});// ===================================================================================// SERVICIO DE ESCUCHA MQTT: PROCESA MENSAJES DE TELEMETR√çA// Se ejecuta al iniciar la aplicaci√≥n y se mantiene escuchando.// ===================================================================================const procesarMensajesMqtt = () => {

console.log('Iniciando servicio de escucha MQTT...');

const client = mqtt.connect(process.env.MQTT_BROKER_URL);



// El '+' es un comod√≠n (wildcard) que nos permite escuchar en m√∫ltiples sub-topics.

const topicMaestro = 'dispositivos/+/telemetria';



client.on('connect', () => {

console.log('Conectado al broker MQTT.');

client.subscribe(topicMaestro, (err) => {

if (err) {

console.error('Error al suscribirse al topic maestro:', err);

} else {

console.log(`Suscrito exitosamente al topic: ${topicMaestro}`);

}

});

});



// Este es el listener principal que se activa con cada mensaje que llega

client.on('message', async (topic, message) => {

console.log(`Mensaje recibido en el topic [${topic}]: ${message.toString()}`);



let dbClient;

try {

// Parsear el mensaje, esperando un formato JSON espec√≠fico

const data = JSON.parse(message.toString());

if (!data.parametros || typeof data.parametros !== 'object') {

throw new Error('El formato del JSON es incorrecto. Debe tener una clave "parametros".');

}



dbClient = await pool.connect(); // Obtener un cliente del pool para la transacci√≥n



// 1. Buscar el ID del registro (rgt_id) asociado a este topic

const registroRes = await dbClient.query('SELECT rgt_id FROM registro WHERE topic = $1', [topic]);

if (registroRes.rows.length === 0) {

throw new Error(`No se encontr√≥ ning√∫n registro para el topic: ${topic}`);

}

const rgt_id = registroRes.rows[0].rgt_id;



// Iniciar una transacci√≥n para asegurar la integridad de los datos

await dbClient.query('BEGIN');



// 2. Insertar la cabecera en la tabla 'mensajes'

const insertMensajeQuery = 'INSERT INTO mensajes (rgt_id, status) VALUES ($1, $2) RETURNING msg_id';

const mensajeRes = await dbClient.query(insertMensajeQuery, [rgt_id, 1]); // Status 1 = Procesado

const msg_id = mensajeRes.rows[0].msg_id;



// 3. Insertar cada par√°metro del mensaje en 'parametros_mensajes'

const parametrosRecibidos = data.parametros;

for (const nombreParametro in parametrosRecibidos) {

const valorParametro = parametrosRecibidos[nombreParametro];



// Buscar el ID del par√°metro por su nombre (ej: "temperatura")

const paramRes = await dbClient.query('SELECT prt_id FROM parametros WHERE nombre = $1', [nombreParametro]);

if (paramRes.rows.length > 0) {

const prt_id = paramRes.rows[0].prt_id;

const insertParametroQuery = 'INSERT INTO parametros_mensajes (msg_id, prt_id, valor) VALUES ($1, $2, $3)';

await dbClient.query(insertParametroQuery, [msg_id, prt_id, valorParametro]);

} else {

console.warn(`Par√°metro desconocido "${nombreParametro}" recibido. Se ignorar√°.`);

}

}



// Si todas las inserciones fueron exitosas, confirma la transacci√≥n

await dbClient.query('COMMIT');

console.log(`Mensaje del topic [${topic}] procesado y guardado con √©xito (MSG_ID: ${msg_id}).`);



} catch (error) {

// Si algo falla, revierte todos los cambios de la transacci√≥n

if (dbClient) {

await dbClient.query('ROLLBACK');

}

console.error(`Error procesando mensaje del topic [${topic}]:`, error.message);

} finally {

// Libera el cliente para que otros puedan usarlo

if (dbClient) {

dbClient.release();

}

}

});



client.on('error', (error) => {

console.error('Error en la conexi√≥n MQTT:', error);

});

};// Iniciar el listener de MQTT una sola vez cuando arranca la aplicaci√≥n

procesarMensajesMqtt();// ===================================================================================// INICIAR EL SERVIDOR EXPRESS// ===================================================================================const PORT = 3000;

app.listen(PORT, () => {

console.log(`Servidor API escuchando en http://localhost:${PORT}`);

});

Paso 5: Ejecuci√≥n y Pruebas üöÄ

Tu c√≥digo est√° listo, pero la base de datos est√° vac√≠a. Necesitamos insertar algunos datos de prueba para que todo funcione.

Insertar Datos de Prueba:

Abre psql de nuevo, con√©ctate a la base de datos dispositivos_db (\c dispositivos_db).

Copia y pega el siguiente bloque SQL para crear un usuario, un dispositivo y vincularlos para que puedan comunicarse v√≠a MQTT.

SQL



-- 1. Crear un usuario de pruebaINSERT INTO usuario (nombre, correo, clave) VALUES ('Usuario de Prueba', 'test@test.com', '12345');-- 2. Crear un dispositivo de pruebaINSERT INTO dispositivo (modelo, tipo, serie, marca, estatus) VALUES ('ESP32-TEMP', 'Sensor', 'SN-001A', 'Espressif', 'A');-- 3. Crear los par√°metros que este tipo de dispositivo puede medirINSERT INTO parametros (nombre, tipo, unidad) VALUES ('temperatura', 'Decimal', 'C');INSERT INTO parametros (nombre, tipo, unidad) VALUES ('humedad', 'Porcentaje', '%');-- 4. Crear el REGISTRO que une todo y define el topic MQTT para este dispositivo-- ASOCIA: Usuario con ID 1, con Dispositivo con ID 1, y le asigna un Topic espec√≠fico.INSERT INTO registro (usr_id, dsp_id, topic) VALUES (1, 1, 'dispositivos/SN-001A/telemetria');

Iniciar el Servidor:

Vuelve a la terminal de VS Code y ejecuta:

Bash



node index.js

Ver√°s mensajes indicando que el servidor API y el listener MQTT est√°n activos.

Probar el Endpoint de API (/dispositivo):

Usa una herramienta como Postman o la extensi√≥n Thunder Client en VS Code.

Crea una nueva petici√≥n:

M√©todo: POST

URL: http://localhost:3000/dispositivo

Ve a la pesta√±a Body, selecciona JSON y pega lo siguiente:

JSON



{

"modelo": "DHT22-SENSOR",

"tipo": "Sensor",

"serie": "SN-002B",

"marca": "Aosong",

"estatus": "A"

}

Env√≠a la petici√≥n. Recibir√°s una respuesta 201 Created confirmando que se cre√≥.

Probar el Listener MQTT:

Abre en tu navegador el cliente web de HiveMQ.

En la secci√≥n Publish:

Topic: Escribe el topic exacto que definimos en los datos de prueba: dispositivos/SN-001A/telemetria

Message: Pega el siguiente JSON, que es el formato que nuestro c√≥digo espera:

JSON



{

"parametros": {

"temperatura": 24.5,

"humedad": 58.2

}

}

Haz clic en Publish.

¬°Revisa la terminal de VS Code! Ver√°s un mensaje indicando que el mensaje fue recibido, procesado y guardado.

Verificaci√≥n Final en la Base de Datos:

Vuelve a psql y ejecuta estas consultas para ver los datos guardados:

SQL



SELECT * FROM mensajes;SELECT * FROM parametros_mensajes;

Ver√°s una nueva fila en mensajes y dos nuevas filas en parametros_mensajes con los valores que enviaste.

¬°Felicidades! Has construido, desde cero, una aplicaci√≥n robusta con una base de datos relacional profesional, un API para crear dispositivos y un servicio que escucha y almacena datos de telemetr√≠a en tiempo real.



pero al ejecutarlo me sale lo siguiente en la pagina

Cannot GET /



y en la consola me sale

PS C:\Users\danieaccs1\Desktop\api_dispositivos> node index.js

[dotenv@17.2.3] injecting env (6) from .env -- tip: ‚úÖ audit secrets and track compliance: https://dotenvx.com/ops

Iniciando servicio de escucha MQTT...

Servidor API escuchando en http://localhost:3000

Conectado al broker MQTT.

Suscrito exitosamente al topic: dispositivos/+/telemetria



Ayudame a resolver esto

¬°Hola! No te preocupes, lo que est√°s viendo es completamente normal y esperado. De hecho, es una excelente se√±al de que tu servidor est√° funcionando correctamente.

El error Cannot GET / no significa que tu aplicaci√≥n est√© rota. Significa que tu navegador intent√≥ hacer una petici√≥n GET a la direcci√≥n ra√≠z (/), pero en tu c√≥digo no has definido qu√© hacer en ese caso.

¬øPor Qu√© Sucede Esto? ü§î
Tu servidor Express es como un recepcionista que solo tiene instrucciones para una tarea muy espec√≠fica.

Tu C√≥digo: Le has dado una instrucci√≥n clara con esta l√≠nea:

JavaScript
app.post('/dispositivo', async (req, res) => { ... });
Esto se traduce como: "Si alguien viene a la puerta /dispositivo y usa el m√©todo POST, ejecuta este c√≥digo".

Tu Acci√≥n: Al escribir http://localhost:3000 en la barra de direcciones de tu navegador y presionar Enter, el navegador siempre realiza una petici√≥n de tipo GET a la ruta ra√≠z (/).

El Resultado: El servidor recibe la petici√≥n y dice: "Me han pedido hacer algo con GET en la ruta /, pero no tengo ninguna instrucci√≥n para eso. Solo s√© qu√© hacer con POST en /dispositivo". Por eso te devuelve el mensaje Cannot GET /.

En resumen: Est√°s intentando acceder a tu API como si fuera una p√°gina web, pero tu API (por ahora) no tiene una "p√°gina de inicio". Solo tiene un endpoint funcional que responde a POST.

La Soluci√≥n Correcta: Sigue el Paso 5 de tu Gu√≠a ‚úÖ
La gu√≠a que est√°s siguiendo ya te indica la forma correcta de probar tu aplicaci√≥n. No se prueba escribiendo la direcci√≥n en el navegador, sino usando una herramienta dise√±ada para probar APIs.

Sigue exactamente estos pasos de tu tutorial:

Mant√©n tu servidor corriendo (no cierres la terminal donde ejecutaste node index.js).

Usa una herramienta como Postman o Thunder Client (una extensi√≥n para VS Code).

Crea una nueva petici√≥n con los siguientes datos:

M√©todo: POST (¬°Esta es la clave! No GET).

URL: http://localhost:3000/dispositivo

Body (Cuerpo): Selecciona el tipo JSON y pega el siguiente contenido:

JSON
{
    "modelo": "DHT22-SENSOR",
    "tipo": "Sensor",
    "serie": "SN-002B",
    "marca": "Aosong",
    "estatus": "A"
}
Env√≠a la petici√≥n.

Al hacer esto, ver√°s en Postman (o la herramienta que uses) una respuesta exitosa con un c√≥digo 201 Created, y en tu base de datos se habr√° creado el nuevo dispositivo.

Mejora Opcional (Para que no veas el error en el navegador) üí°
Si quieres que al entrar a http://localhost:3000 en tu navegador se vea un mensaje de bienvenida en lugar del error, puedes a√±adir un manejador para la ruta ra√≠z.

Simplemente agrega este peque√±o bloque de c√≥digo en tu archivo index.js, justo antes de la l√≠nea const PORT = 3000;:

JavaScript
// ... tu c√≥digo anterior

// ===================================================================================
// ENDPOINT DE BIENVENIDA PARA LA RUTA RA√çZ (OPCIONAL)
// Esto es solo para que se vea algo bonito en el navegador.
// ===================================================================================
app.get('/', (req, res) => {
  res.send('<h1>¬°El servidor API y el listener MQTT est√°n funcionando!</h1><p>Usa una herramienta como Postman para probar el endpoint POST /dispositivo.</p>');
});


// ===================================================================================
// INICIAR EL SERVIDOR EXPRESS
// ===================================================================================
const PORT = 3000;
app.listen(PORT, () => {
// ... el resto de tu c√≥digo
Si guardas el archivo, detienes el servidor (con Ctrl + C en la terminal) y lo vuelves a iniciar con node index.js, ahora al visitar http://localhost:3000 en tu navegador ver√°s el mensaje de bienvenida.

¬°Felicidades, tu c√≥digo funciona perfectamente! Solo estabas tocando la puerta equivocada. üòâ

Me sale este error al momento de ejecutar en railway



Error en la conexi√≥n MQTT: AggregateError [ECONNREFUSED]:

at internalConnectMultiple (node:net:1134:18)

at afterConnectMultiple (node:net:1715:7) {

code: 'ECONNREFUSED',

[errors]: [

Error: connect ECONNREFUSED ::1:1883

at createConnectionError (node:net:1678:14)

at afterConnectMultiple (node:net:1708:16) {

errno: -111,

code: 'ECONNREFUSED',

syscall: 'connect',

address: '::1',

port: 1883

},

Error: connect ECONNREFUSED 127.0.0.1:1883

at createConnectionError (node:net:1678:14)

at afterConnectMultiple (node:net:1708:16) {

errno: -111,

code: 'ECONNREFUSED',

syscall: 'connect',

address: '127.0.0.1',

port: 1883

}

]

}

port: 1883

Error en la conexi√≥n MQTT: AggregateError [ECONNREFUSED]:

at internalConnectMultiple (node:net:1134:18)

}

at afterConnectMultiple (node:net:1715:7) {

code: 'ECONNREFUSED',

]

[errors]: [

}

Error: connect ECONNREFUSED ::1:1883

at createConnectionError (node:net:1678:14)

at afterConnectMultiple (node:net:1708:16) {

errno: -111,

code: 'ECONNREFUSED',

syscall: 'connect',

address: '::1',

port: 1883

},

Error: connect ECONNREFUSED 127.0.0.1:1883

at createConnectionError (node:net:1678:14)

at afterConnectMultiple (node:net:1708:16) {

errno: -111,

code: 'ECONNREFUSED',

syscall: 'connect',

address: '127.0.0.1',

address: '::1',

port: 1883

},

Error: connect ECONNREFUSED 127.0.0.1:1883

at createConnectionError (node:net:1678:14)

at afterConnectMultiple (node:net:1708:16) {

errno: -111,

code: 'ECONNREFUSED',

syscall: 'connect',

address: '127.0.0.1',

port: 1883

Error en la conexi√≥n MQTT: AggregateError [ECONNREFUSED]:

}

at internalConnectMultiple (node:net:1134:18)

]

}

at afterConnectMultiple (node:net:1715:7) {

code: 'ECONNREFUSED',

[errors]: [

Error: connect ECONNREFUSED ::1:1883

at createConnectionError (node:net:1678:14)

at afterConnectMultiple (node:net:1708:16) {

errno: -111,

code: 'ECONNREFUSED',

syscall: 'connect',

Error en la conexi√≥n MQTT: AggregateError [ECONNREFUSED]:

at internalConnectMultiple (node:net:1134:18)

at afterConnectMultiple (node:net:1715:7) {

code: 'ECONNREFUSED',

[errors]: [

Error: connect ECONNREFUSED ::1:1883

at createConnectionError (node:net:1678:14)

at afterConnectMultiple (node:net:1708:16) {

errno: -111,

code: 'ECONNREFUSED',

syscall: 'connect',

address: '::1',

port: 1883

},

Error: connect ECONNREFUSED 127.0.0.1:1883

at createConnectionError (node:net:1678:14)

at afterConnectMultiple (node:net:1708:16) {

errno: -111,

code: 'ECONNREFUSED',

syscall: 'connect',

address: '127.0.0.1',

port: 1883

}

]

}

}

]

Error en la conexi√≥n MQTT: AggregateError [ECONNREFUSED]:

}

at internalConnectMultiple (node:net:1134:18)

at afterConnectMultiple (node:net:1715:7) {

code: 'ECONNREFUSED',

[errors]: [

Error: connect ECONNREFUSED ::1:1883

at createConnectionError (node:net:1678:14)

at afterConnectMultiple (node:net:1708:16) {

errno: -111,

code: 'ECONNREFUSED',

syscall: 'connect',

address: '::1',

port: 1883

},

Error: connect ECONNREFUSED 127.0.0.1:1883

at createConnectionError (node:net:1678:14)

at afterConnectMultiple (node:net:1708:16) {

errno: -111,

code: 'ECONNREFUSED',

syscall: 'connect',

address: '127.0.0.1',

port: 1883

Este error es claro y tiene una soluci√≥n directa.

El problema es que tu aplicaci√≥n en Railway est√° intentando conectarse a un broker MQTT en localhost:1883 (las direcciones 127.0.0.1 y ::1 ambas significan localhost).

El c√≥digo ECONNREFUSED significa "Conexi√≥n Rechazada". Esto pasa porque, dentro del contenedor de Railway, localhost se refiere al contenedor mismo, y no hay ning√∫n broker MQTT corriendo all√≠.

¬øPor qu√© pasa esto?
Esto sucede porque tu variable de entorno MQTT_BROKER_URL no est√° configurada correctamente en tu proyecto de Railway.

Cuando tu c√≥digo javascript ejecuta mqtt.connect(process.env.MQTT_BROKER_URL) y no encuentra esa variable, la librer√≠a mqtt intenta conectarse a la direcci√≥n por defecto: mqtt://localhost:1883.

El broker que quieres usar (seg√∫n tu gu√≠a) es mqtt://broker.hivemq.com, que es un servicio p√∫blico en internet, no localhost.

La Soluci√≥n: A√±adir la Variable de Entorno en Railway
Debes configurar las variables de entorno en el panel de tu proyecto de Railway para que coincidan con tu archivo .env.

Ve a tu proyecto en Railway.app.

Selecciona el servicio donde tienes desplegado tu index.js.

Ve a la pesta√±a "Variables".

A√±ade una nueva variable:

Nombre: MQTT_BROKER_URL

Valor: mqtt://broker.hivemq.com

¬°Importante! Revisa tus Otras Variables
Ya que est√°s ah√≠, aseg√∫rate de haber a√±adido tambi√©n todas las variables de tu base de datos PostgreSQL (que Railway te provee) en esa misma pesta√±a de "Variables":

DB_USER (Deber√≠a ser postgres)

DB_HOST (El que te da Railway, ej: services.railway.app)

DB_DATABASE (Deber√≠a ser railway)

DB_PASSWORD (La que te da Railway)

DB_PORT (El que te da Railway)

Una vez que guardes la variable MQTT_BROKER_URL, Railway detectar√° el cambio y desplegar√° tu aplicaci√≥n autom√°ticamente. Al reiniciarse, los logs deber√≠an mostrar:

Iniciando servicio de escucha MQTT...
Servidor API escuchando en http://localhost:3000
Conectado al broker MQTT.
Suscrito exitosamente al topic: dispositivos/+/telemetria